{
    "cmake.generator": "Ninja",
    "cmake.configureOnOpen": true,

    "cmake.useCMakePresets": "always",
    // line below already set by presets
    // "cmake.buildDirectory": "/mnt/ram/BreakingLCG/build/Active",
    "C_Cpp.default.compileCommands": "/mnt/ram/BreakingLCG/build/Active/compile_commands.json",

    // Keep the compile_commands.json exported by CMake
    "cmake.exportCompileCommandsFile": true,

    // ensure clang compilers (same as CLI)
    "cmake.configureArgs": [
        "-DCMAKE_C_COMPILER=gcc",
        "-DCMAKE_CXX_COMPILER=g++"
    ],

    // ðŸ”½ Build the active target before running it
    // "cmake.buildBeforeRun": true,

    // Use cpptools IntelliSense
    "C_Cpp.intelliSenseEngine": "default",
    "C_Cpp.default.cppStandard": "c++23",

    // Let CMake Tools feed include paths and defines to cpptools (for debugging)
    "C_Cpp.default.configurationProvider": "ms-vscode.cmake-tools",
    // clangd settings removed; using cpptools

    // Compiler for IntelliSense (cpptools)
    "C_Cpp.default.compilerPath": "/usr/bin/g++",
    "C_Cpp.default.intelliSenseMode": "linux-gcc-x64",


    "python-envs.defaultEnvManager": "ms-python.python:system",
    "python-envs.pythonProjects": [],

    // auto target intro
    "cmake.configureOnEdit": true,
    "cmake.buildBeforeRun": true,

    // indent
    "editor.detectIndentation": false,
    "[c]": {
        "editor.insertSpaces": true,
        "editor.tabSize": 4
    },
    "[cpp]": {
        "editor.insertSpaces": true,
        "editor.tabSize": 4
    },
    // "editor.formatOnSave": true,

    // clang format
    "C_Cpp.formatting": "clangFormat",
    "C_Cpp.clang_format_style": "file",
    // Default formatter: use cpptools/clang-format


    // Set max line length for formatting/word wrap
    "editor.rulers": [120],

    // Optional: control automatic wrapping
    "editor.wordWrap": "off",          // or "wordWrapColumn"
    "editor.wordWrapColumn": 120,

    // For clang-format: enforce 120 chars
    "C_Cpp.clang_format_fallbackStyle": "{ BasedOnStyle: LLVM, ColumnLimit: 120 }"
}
